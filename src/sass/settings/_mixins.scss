// ==========================================================================
// Mixins
// ==========================================================================

// bp()
// Media query breakpoints
// Usage:
// @include bp($min: 600px){ body { background:#000 } }
// @include bp($max: 600px){ body { background:#000 } }
// @include bp($min: 600px, $max: 600px){ body { background:#000 } }
// @include bp($small){ body { background:#000 } }
// @include bp($medium){ body { background:#000 } }
// @include bp($large){ body { background:#000 } }
// @include bp($max: #{$small - 1}) { body { background:#000 } }

@mixin bp($break: false, $min: false, $max: false, $media: 'only screen') {
	@if $break {
		@media #{$media} and (min-width: $break) { @content; }
	}
	@else if $min and $max {
		@media #{$media} and (min-width: $min) and (max-width: $max) { @content; }
	}
	@else if $min {
		@media #{$media} and (min-width: $min) { @content; }
	}
	@else if $max {
		@media #{$media} and (max-width: $max) { @content; }
	}
}

// rbp()
// Media query breakpoints with targeting for retina devices
// By using a ratio of 1.5 instead of 2, you can target other non-Apple devices with the same query
// Usage:
// @include rbp($min: 600px){ body { background:#000 } }
// @include rbp($max: 600px){ body { background:#000 } }
// @include rbp($min: 600px, $max: 600px){ body { background:#000 } }
// @include rbp($small){ body { background:#000 } }
// @include rbp($medium){ body { background:#000 } }
// @include rbp($large){ body { background:#000 } }
// @include rbp($max: #{$small - 1}) { body { background:#000 } }

@mixin rbp($break: false, $min: false, $max: false, $media: 'only screen') {
	@if $break {
		@media #{$media} and (-webkit-min-device-pixel-ratio: 1.5) and (min-width: $break),
		#{$media} and (-moz-min-device-pixel-ratio: 1.5) and (min-width: $break),
		#{$media} and (-o-min-device-pixel-ratio: 3 / 2) and (min-width: $break),
		#{$media} and (min-device-pixel-ratio: 1.5) and (min-width: $break) { @content; }
	}
	@else if $min and $max {
		@media #{$media} and (-webkit-min-device-pixel-ratio: 1.5) and (min-width: $min) and (max-width: $max),
		#{$media} and (-moz-min-device-pixel-ratio: 1.5) and (min-width: $min) and (max-width: $max),
		#{$media} and (-o-min-device-pixel-ratio: 3 / 2) and (min-width: $min) and (max-width: $max),
		#{$media} and (min-device-pixel-ratio: 1.5) and (min-width: $min) and (max-width: $max) { @content; }
	}
	@else if $min {
		@media #{$media} and (-webkit-min-device-pixel-ratio: 1.5) and (min-width: $min),
		#{$media} and (-moz-min-device-pixel-ratio: 1.5) and (min-width: $min),
		#{$media} and (-o-min-device-pixel-ratio: 3 / 2) and (min-width: $min),
		#{$media} and (min-device-pixel-ratio: 1.5) and (min-width: $min) { @content; }
	}
	@else if $max {
		@media #{$media} and (-webkit-min-device-pixel-ratio: 1.5) and (max-width: $max),
		#{$media} and (-moz-min-device-pixel-ratio: 1.5) and (max-width: $max),
		#{$media} and (-o-min-device-pixel-ratio: 3 / 2) and (max-width: $max),
		#{$media} and (min-device-pixel-ratio: 1.5) and (max-width: $max) { @content; }
	}
}

// retina()
// Media query to target retina devices
// By using a ratio of 1.5 instead of 2, you can target other non-Apple devices with the same query
// Usage:
// @include retina(){ body { background:#000 } }
// @include retina($media: 'all'){ body { background:#000 } }

@mixin retina($media: 'only screen') {
	@media #{$media} and (-webkit-min-device-pixel-ratio: 1.5),
	#{$media} and (-moz-min-device-pixel-ratio: 1.5),
	#{$media} and (-o-min-device-pixel-ratio: 3 / 2),
	#{$media} and (min-device-pixel-ratio: 1.5) { @content; }
}

// vertical-align()
// Vertically align an element
// Usage:
// @include vertical-align()
// @include vertical-align(absolute)
// @include vertical-align(absolute !important)

@mixin vertical-align($position: relative, $top: 50%, $transform: 50%) {
	position: $position;
	top: $top;
	-webkit-transform: translateY(-$transform);
	-ms-transform: translateY(-$transform);
	transform: translateY(-$transform);
}

// border()
// Border style and radius prefixes
// Usage:
// @include border($radius: 3px, $style: 1px solid red)

@mixin border($radius: 3px, $style: 1px solid red) {
	border: $style;
	-moz-border-radius: $radius;
	-webkit-border-radius: $radius;
	-o-border-radius: $radius;
	border-radius: $radius;
}

// transition()
// Transition prefixes with variable arguments
// Usage:
// @include transition(red .3s ease)

@mixin transition($args...) {
	-webkit-transition: $args;
	-moz-transition: $args;
	-ms-transition: $args;
	-o-transition: $args;
	transition: $args;
}

// opacity()
// Cross browser opacity, IE5+
// Usage:
// @include opacity(0.8)

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

// box-shadow()
// Box shadow prefixes
// Usage:
// @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999)

@mixin box-shadow($shadows...) {
	-moz-box-shadow: $shadows;
	-webkit-box-shadow: $shadows;
	box-shadow: $shadows;
}

// clearfix
// Clear floated elements, IE6+
// Usage:
// @extend %clearfix

%clearfix {
	*zoom: 1;
	&:before, &:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// fancy toggle switch
// MARKUP EXAMPLE
// <legend>Toggle Switch</legend>
// <label class="toggle-switch" for="toggle-switch">
//     <input id="toggle-switch" type="checkbox">
//     <div class="switch-toggle"></div>
// </label>
@mixin toggle-switch(
    $track-height           : 10px,
    $indicator-color        : #efefef,
    $indicator-color-active : #003DA5,
    $track-color            : #949CA1,
    $track-color-active     : #A4D7F4
) {
    $track-width    : $track-height * 3;
    $indicator-size : $track-height * 1.5;

    position: relative;
    display: block;
    width: $track-width;
    height: $track-height;

    input { display: none; }

    .switch-toggle {
        position: absolute;
        cursor: pointer;
        border: solid 2px $track-color;
        border-radius: $track-height * 2;
        background-color: $track-color;
        transition: .4s;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        &:before {
            height: $indicator-size;
            width: $indicator-size;
            left: -4px;
            top: 50%;
            transform: translateY(-50%);
            background-color: $indicator-color;
            border-radius: 50%;
            border: solid 1px $track-color;
            position: absolute;
            content: "";
            transition: .4s;
        }
    }

    input:checked + .switch-toggle {
        background-color: $track-color-active;
        border-color: $track-color-active;
        &:before {
            background-color: $indicator-color-active;
            border-color: $indicator-color-active;
            transform: translate( ($track-width - ($indicator-size) + 4), -50% );
        }
    }

    input:focus + .switch-toggle {
        box-shadow: 0 0 1px #9cf;
    }
}
